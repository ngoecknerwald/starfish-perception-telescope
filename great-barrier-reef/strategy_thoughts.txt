Neil's overall competition battle plan.

Overall plan:

Make a Faster R-CNN implementation fine-tuned for this specific problem. There is some documentation
for what that would look like in the following places:

R-CNN

https://towardsdatascience.com/r-cnn-for-object-detection-a-technical-summary-9e7bfa8a557c
https://arxiv.org/pdf/1311.2524.pdf

Fast R-CNN

https://towardsdatascience.com/fast-r-cnn-for-object-detection-a-technical-summary-a0ff94faa022
https://arxiv.org/pdf/1504.08083.pdf

Faster R-CNN

https://towardsdatascience.com/faster-r-cnn-for-object-detection-a-technical-summary-474c5b857b46
https://arxiv.org/pdf/1506.01497.pdf

There are also some canned pre-trained models available from the TensorFlow developer hub, see

https://www.tensorflow.org/hub/tutorials/tf2_object_detection
https://tfhub.dev/tensorflow/collections/object_detection/1

Other questions:

1) Do we use data augmentation? If so, how? Random rotations, random deformations, 
and "level of blue-ness" or "light / dark" could be good things to try.

2) There is almost certainly information to be gained by using the previous several video frames to reinforce 
or discourage the current image frame from claiming there is a starfish. I wonder if there is a way to 
"register" the frames together so that an area in one frame can be unambiguously matched to the same 
area in subsequent frames.